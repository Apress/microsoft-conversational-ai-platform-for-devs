/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmBotservice = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Sku = {
        serializedName: "Sku",
        type: {
            name: "Composite",
            className: "Sku",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                tier: {
                    readOnly: true,
                    serializedName: "tier",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                location: {
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                sku: {
                    serializedName: "sku",
                    type: {
                        name: "Composite",
                        className: "Sku"
                    }
                },
                kind: {
                    serializedName: "kind",
                    type: {
                        name: "String"
                    }
                },
                etag: {
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BotProperties = {
        serializedName: "BotProperties",
        type: {
            name: "Composite",
            className: "BotProperties",
            modelProperties: {
                displayName: {
                    required: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                iconUrl: {
                    serializedName: "iconUrl",
                    type: {
                        name: "String"
                    }
                },
                endpoint: {
                    required: true,
                    serializedName: "endpoint",
                    type: {
                        name: "String"
                    }
                },
                endpointVersion: {
                    readOnly: true,
                    serializedName: "endpointVersion",
                    type: {
                        name: "String"
                    }
                },
                msaAppId: {
                    required: true,
                    serializedName: "msaAppId",
                    type: {
                        name: "String"
                    }
                },
                configuredChannels: {
                    readOnly: true,
                    serializedName: "configuredChannels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                enabledChannels: {
                    readOnly: true,
                    serializedName: "enabledChannels",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                developerAppInsightKey: {
                    serializedName: "developerAppInsightKey",
                    type: {
                        name: "String"
                    }
                },
                developerAppInsightsApiKey: {
                    serializedName: "developerAppInsightsApiKey",
                    type: {
                        name: "String"
                    }
                },
                developerAppInsightsApplicationId: {
                    serializedName: "developerAppInsightsApplicationId",
                    type: {
                        name: "String"
                    }
                },
                luisAppIds: {
                    serializedName: "luisAppIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                luisKey: {
                    serializedName: "luisKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Bot = {
        serializedName: "Bot",
        type: {
            name: "Composite",
            className: "Bot",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "BotProperties"
                    }
                } })
        }
    };
    var Channel = {
        serializedName: "Channel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "channelName",
                clientName: "channelName"
            },
            uberParent: "Channel",
            className: "Channel",
            modelProperties: {
                channelName: {
                    required: true,
                    serializedName: "channelName",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var BotChannel = {
        serializedName: "BotChannel",
        type: {
            name: "Composite",
            className: "BotChannel",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "Channel"
                    }
                } })
        }
    };
    var FacebookPage = {
        serializedName: "FacebookPage",
        type: {
            name: "Composite",
            className: "FacebookPage",
            modelProperties: {
                id: {
                    required: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                accessToken: {
                    required: true,
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var FacebookChannelProperties = {
        serializedName: "FacebookChannelProperties",
        type: {
            name: "Composite",
            className: "FacebookChannelProperties",
            modelProperties: {
                verifyToken: {
                    readOnly: true,
                    serializedName: "verifyToken",
                    type: {
                        name: "String"
                    }
                },
                pages: {
                    serializedName: "pages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FacebookPage"
                            }
                        }
                    }
                },
                appId: {
                    required: true,
                    serializedName: "appId",
                    type: {
                        name: "String"
                    }
                },
                appSecret: {
                    required: true,
                    serializedName: "appSecret",
                    type: {
                        name: "String"
                    }
                },
                callbackUrl: {
                    readOnly: true,
                    serializedName: "callbackUrl",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var FacebookChannel = {
        serializedName: "FacebookChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "FacebookChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "FacebookChannelProperties"
                    }
                } })
        }
    };
    var EmailChannelProperties = {
        serializedName: "EmailChannelProperties",
        type: {
            name: "Composite",
            className: "EmailChannelProperties",
            modelProperties: {
                emailAddress: {
                    required: true,
                    serializedName: "emailAddress",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    required: true,
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var EmailChannel = {
        serializedName: "EmailChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "EmailChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "EmailChannelProperties"
                    }
                } })
        }
    };
    var MsTeamsChannelProperties = {
        serializedName: "MsTeamsChannelProperties",
        type: {
            name: "Composite",
            className: "MsTeamsChannelProperties",
            modelProperties: {
                enableCalling: {
                    serializedName: "enableCalling",
                    type: {
                        name: "Boolean"
                    }
                },
                callingWebHook: {
                    serializedName: "callingWebHook",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var MsTeamsChannel = {
        serializedName: "MsTeamsChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "MsTeamsChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "MsTeamsChannelProperties"
                    }
                } })
        }
    };
    var SkypeChannelProperties = {
        serializedName: "SkypeChannelProperties",
        type: {
            name: "Composite",
            className: "SkypeChannelProperties",
            modelProperties: {
                enableMessaging: {
                    serializedName: "enableMessaging",
                    type: {
                        name: "Boolean"
                    }
                },
                enableMediaCards: {
                    serializedName: "enableMediaCards",
                    type: {
                        name: "Boolean"
                    }
                },
                enableVideo: {
                    serializedName: "enableVideo",
                    type: {
                        name: "Boolean"
                    }
                },
                enableCalling: {
                    serializedName: "enableCalling",
                    type: {
                        name: "Boolean"
                    }
                },
                enableScreenSharing: {
                    serializedName: "enableScreenSharing",
                    type: {
                        name: "Boolean"
                    }
                },
                enableGroups: {
                    serializedName: "enableGroups",
                    type: {
                        name: "Boolean"
                    }
                },
                groupsMode: {
                    serializedName: "groupsMode",
                    type: {
                        name: "String"
                    }
                },
                callingWebHook: {
                    serializedName: "callingWebHook",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SkypeChannel = {
        serializedName: "SkypeChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "SkypeChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SkypeChannelProperties"
                    }
                } })
        }
    };
    var KikChannelProperties = {
        serializedName: "KikChannelProperties",
        type: {
            name: "Composite",
            className: "KikChannelProperties",
            modelProperties: {
                userName: {
                    required: true,
                    serializedName: "userName",
                    type: {
                        name: "String"
                    }
                },
                apiKey: {
                    required: true,
                    serializedName: "apiKey",
                    type: {
                        name: "String"
                    }
                },
                isValidated: {
                    serializedName: "isValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var KikChannel = {
        serializedName: "KikChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "KikChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "KikChannelProperties"
                    }
                } })
        }
    };
    var WebChatSite = {
        serializedName: "WebChatSite",
        type: {
            name: "Composite",
            className: "WebChatSite",
            modelProperties: {
                siteId: {
                    readOnly: true,
                    serializedName: "siteId",
                    type: {
                        name: "String"
                    }
                },
                siteName: {
                    required: true,
                    serializedName: "siteName",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    readOnly: true,
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                key2: {
                    readOnly: true,
                    serializedName: "key2",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                enablePreview: {
                    required: true,
                    serializedName: "enablePreview",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var WebChatChannelProperties = {
        serializedName: "WebChatChannelProperties",
        type: {
            name: "Composite",
            className: "WebChatChannelProperties",
            modelProperties: {
                webChatEmbedCode: {
                    readOnly: true,
                    serializedName: "webChatEmbedCode",
                    type: {
                        name: "String"
                    }
                },
                sites: {
                    serializedName: "sites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "WebChatSite"
                            }
                        }
                    }
                }
            }
        }
    };
    var WebChatChannel = {
        serializedName: "WebChatChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "WebChatChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "WebChatChannelProperties"
                    }
                } })
        }
    };
    var DirectLineSite = {
        serializedName: "DirectLineSite",
        type: {
            name: "Composite",
            className: "DirectLineSite",
            modelProperties: {
                siteId: {
                    readOnly: true,
                    serializedName: "siteId",
                    type: {
                        name: "String"
                    }
                },
                siteName: {
                    required: true,
                    serializedName: "siteName",
                    type: {
                        name: "String"
                    }
                },
                key: {
                    readOnly: true,
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                key2: {
                    readOnly: true,
                    serializedName: "key2",
                    type: {
                        name: "String"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                isV1Enabled: {
                    required: true,
                    serializedName: "isV1Enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                isV3Enabled: {
                    required: true,
                    serializedName: "isV3Enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                isSecureSiteEnabled: {
                    serializedName: "isSecureSiteEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                trustedOrigins: {
                    serializedName: "trustedOrigins",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var DirectLineChannelProperties = {
        serializedName: "DirectLineChannelProperties",
        type: {
            name: "Composite",
            className: "DirectLineChannelProperties",
            modelProperties: {
                sites: {
                    serializedName: "sites",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "DirectLineSite"
                            }
                        }
                    }
                }
            }
        }
    };
    var DirectLineChannel = {
        serializedName: "DirectLineChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "DirectLineChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "DirectLineChannelProperties"
                    }
                } })
        }
    };
    var TelegramChannelProperties = {
        serializedName: "TelegramChannelProperties",
        type: {
            name: "Composite",
            className: "TelegramChannelProperties",
            modelProperties: {
                accessToken: {
                    required: true,
                    serializedName: "accessToken",
                    type: {
                        name: "String"
                    }
                },
                isValidated: {
                    serializedName: "isValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var TelegramChannel = {
        serializedName: "TelegramChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "TelegramChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "TelegramChannelProperties"
                    }
                } })
        }
    };
    var SmsChannelProperties = {
        serializedName: "SmsChannelProperties",
        type: {
            name: "Composite",
            className: "SmsChannelProperties",
            modelProperties: {
                phone: {
                    required: true,
                    serializedName: "phone",
                    type: {
                        name: "String"
                    }
                },
                accountSID: {
                    required: true,
                    serializedName: "accountSID",
                    type: {
                        name: "String"
                    }
                },
                authToken: {
                    required: true,
                    serializedName: "authToken",
                    type: {
                        name: "String"
                    }
                },
                isValidated: {
                    serializedName: "isValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SmsChannel = {
        serializedName: "SmsChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "SmsChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SmsChannelProperties"
                    }
                } })
        }
    };
    var SlackChannelProperties = {
        serializedName: "SlackChannelProperties",
        type: {
            name: "Composite",
            className: "SlackChannelProperties",
            modelProperties: {
                clientId: {
                    required: true,
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    required: true,
                    serializedName: "clientSecret",
                    type: {
                        name: "String"
                    }
                },
                verificationToken: {
                    required: true,
                    serializedName: "verificationToken",
                    type: {
                        name: "String"
                    }
                },
                landingPageUrl: {
                    serializedName: "landingPageUrl",
                    type: {
                        name: "String"
                    }
                },
                redirectAction: {
                    readOnly: true,
                    serializedName: "redirectAction",
                    type: {
                        name: "String"
                    }
                },
                lastSubmissionId: {
                    readOnly: true,
                    serializedName: "lastSubmissionId",
                    type: {
                        name: "String"
                    }
                },
                registerBeforeOAuthFlow: {
                    readOnly: true,
                    serializedName: "registerBeforeOAuthFlow",
                    type: {
                        name: "Boolean"
                    }
                },
                isValidated: {
                    readOnly: true,
                    serializedName: "isValidated",
                    type: {
                        name: "Boolean"
                    }
                },
                isEnabled: {
                    required: true,
                    serializedName: "isEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var SlackChannel = {
        serializedName: "SlackChannel",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Channel.type.polymorphicDiscriminator,
            uberParent: "Channel",
            className: "SlackChannel",
            modelProperties: __assign({}, Channel.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "SlackChannelProperties"
                    }
                } })
        }
    };
    var ConnectionItemName = {
        serializedName: "ConnectionItemName",
        type: {
            name: "Composite",
            className: "ConnectionItemName",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionSettingParameter = {
        serializedName: "ConnectionSettingParameter",
        type: {
            name: "Composite",
            className: "ConnectionSettingParameter",
            modelProperties: {
                key: {
                    serializedName: "key",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ConnectionSettingProperties = {
        serializedName: "ConnectionSettingProperties",
        type: {
            name: "Composite",
            className: "ConnectionSettingProperties",
            modelProperties: {
                clientId: {
                    serializedName: "clientId",
                    type: {
                        name: "String"
                    }
                },
                settingId: {
                    readOnly: true,
                    serializedName: "settingId",
                    type: {
                        name: "String"
                    }
                },
                clientSecret: {
                    serializedName: "clientSecret",
                    type: {
                        name: "String"
                    }
                },
                scopes: {
                    serializedName: "scopes",
                    type: {
                        name: "String"
                    }
                },
                serviceProviderId: {
                    serializedName: "serviceProviderId",
                    type: {
                        name: "String"
                    }
                },
                serviceProviderDisplayName: {
                    serializedName: "serviceProviderDisplayName",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectionSettingParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectionSetting = {
        serializedName: "ConnectionSetting",
        type: {
            name: "Composite",
            className: "ConnectionSetting",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ConnectionSettingProperties"
                    }
                } })
        }
    };
    var ServiceProviderParameter = {
        serializedName: "ServiceProviderParameter",
        type: {
            name: "Composite",
            className: "ServiceProviderParameter",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                helpUrl: {
                    readOnly: true,
                    serializedName: "helpUrl",
                    type: {
                        name: "String"
                    }
                },
                default: {
                    readOnly: true,
                    serializedName: "default",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceProviderProperties = {
        serializedName: "ServiceProviderProperties",
        type: {
            name: "Composite",
            className: "ServiceProviderProperties",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                displayName: {
                    readOnly: true,
                    serializedName: "displayName",
                    type: {
                        name: "String"
                    }
                },
                serviceProviderName: {
                    readOnly: true,
                    serializedName: "serviceProviderName",
                    type: {
                        name: "String"
                    }
                },
                devPortalUrl: {
                    readOnly: true,
                    serializedName: "devPortalUrl",
                    type: {
                        name: "String"
                    }
                },
                iconUrl: {
                    readOnly: true,
                    serializedName: "iconUrl",
                    type: {
                        name: "String"
                    }
                },
                parameters: {
                    serializedName: "parameters",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceProviderParameter"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceProvider = {
        serializedName: "ServiceProvider",
        type: {
            name: "Composite",
            className: "ServiceProvider",
            modelProperties: {
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "ServiceProviderProperties"
                    }
                }
            }
        }
    };
    var ServiceProviderResponseList = {
        serializedName: "ServiceProviderResponseList",
        type: {
            name: "Composite",
            className: "ServiceProviderResponseList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "value",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceProvider"
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorBody = {
        serializedName: "ErrorBody",
        type: {
            name: "Composite",
            className: "ErrorBody",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorBody"
                    }
                }
            }
        }
    };
    var OperationDisplayInfo = {
        serializedName: "OperationDisplayInfo",
        type: {
            name: "Composite",
            className: "OperationDisplayInfo",
            modelProperties: {
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationEntity = {
        serializedName: "OperationEntity",
        type: {
            name: "Composite",
            className: "OperationEntity",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplayInfo"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityRequestBody = {
        serializedName: "CheckNameAvailabilityRequestBody",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityRequestBody",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CheckNameAvailabilityResponseBody = {
        serializedName: "CheckNameAvailabilityResponseBody",
        type: {
            name: "Composite",
            className: "CheckNameAvailabilityResponseBody",
            modelProperties: {
                valid: {
                    serializedName: "valid",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnterpriseChannelCheckNameAvailabilityRequest = {
        serializedName: "EnterpriseChannelCheckNameAvailabilityRequest",
        type: {
            name: "Composite",
            className: "EnterpriseChannelCheckNameAvailabilityRequest",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnterpriseChannelCheckNameAvailabilityResponse = {
        serializedName: "EnterpriseChannelCheckNameAvailabilityResponse",
        type: {
            name: "Composite",
            className: "EnterpriseChannelCheckNameAvailabilityResponse",
            modelProperties: {
                valid: {
                    serializedName: "valid",
                    type: {
                        name: "Boolean"
                    }
                },
                message: {
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnterpriseChannelNode = {
        serializedName: "EnterpriseChannelNode",
        type: {
            name: "Composite",
            className: "EnterpriseChannelNode",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                azureSku: {
                    required: true,
                    serializedName: "azureSku",
                    type: {
                        name: "String"
                    }
                },
                azureLocation: {
                    required: true,
                    serializedName: "azureLocation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var EnterpriseChannelProperties = {
        serializedName: "EnterpriseChannelProperties",
        type: {
            name: "Composite",
            className: "EnterpriseChannelProperties",
            modelProperties: {
                state: {
                    serializedName: "state",
                    type: {
                        name: "String"
                    }
                },
                nodes: {
                    required: true,
                    serializedName: "nodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnterpriseChannelNode"
                            }
                        }
                    }
                }
            }
        }
    };
    var EnterpriseChannel = {
        serializedName: "EnterpriseChannel",
        type: {
            name: "Composite",
            className: "EnterpriseChannel",
            modelProperties: __assign({}, Resource.type.modelProperties, { properties: {
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "EnterpriseChannelProperties"
                    }
                } })
        }
    };
    var BotResponseList = {
        serializedName: "BotResponseList",
        type: {
            name: "Composite",
            className: "BotResponseList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Bot"
                            }
                        }
                    }
                }
            }
        }
    };
    var ChannelResponseList = {
        serializedName: "ChannelResponseList",
        type: {
            name: "Composite",
            className: "ChannelResponseList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "BotChannel"
                            }
                        }
                    }
                }
            }
        }
    };
    var OperationEntityListResult = {
        serializedName: "OperationEntityListResult",
        type: {
            name: "Composite",
            className: "OperationEntityListResult",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "OperationEntity"
                            }
                        }
                    }
                }
            }
        }
    };
    var ConnectionSettingResponseList = {
        serializedName: "ConnectionSettingResponseList",
        type: {
            name: "Composite",
            className: "ConnectionSettingResponseList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ConnectionSetting"
                            }
                        }
                    }
                }
            }
        }
    };
    var EnterpriseChannelResponseList = {
        serializedName: "EnterpriseChannelResponseList",
        type: {
            name: "Composite",
            className: "EnterpriseChannelResponseList",
            modelProperties: {
                nextLink: {
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                },
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "EnterpriseChannel"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'Channel': Channel,
        'Channel.FacebookChannel': FacebookChannel,
        'Channel.EmailChannel': EmailChannel,
        'Channel.MsTeamsChannel': MsTeamsChannel,
        'Channel.SkypeChannel': SkypeChannel,
        'Channel.KikChannel': KikChannel,
        'Channel.WebChatChannel': WebChatChannel,
        'Channel.DirectLineChannel': DirectLineChannel,
        'Channel.TelegramChannel': TelegramChannel,
        'Channel.SmsChannel': SmsChannel,
        'Channel.SlackChannel': SlackChannel
    };

    var mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        Sku: Sku,
        Resource: Resource,
        BotProperties: BotProperties,
        Bot: Bot,
        Channel: Channel,
        BotChannel: BotChannel,
        FacebookPage: FacebookPage,
        FacebookChannelProperties: FacebookChannelProperties,
        FacebookChannel: FacebookChannel,
        EmailChannelProperties: EmailChannelProperties,
        EmailChannel: EmailChannel,
        MsTeamsChannelProperties: MsTeamsChannelProperties,
        MsTeamsChannel: MsTeamsChannel,
        SkypeChannelProperties: SkypeChannelProperties,
        SkypeChannel: SkypeChannel,
        KikChannelProperties: KikChannelProperties,
        KikChannel: KikChannel,
        WebChatSite: WebChatSite,
        WebChatChannelProperties: WebChatChannelProperties,
        WebChatChannel: WebChatChannel,
        DirectLineSite: DirectLineSite,
        DirectLineChannelProperties: DirectLineChannelProperties,
        DirectLineChannel: DirectLineChannel,
        TelegramChannelProperties: TelegramChannelProperties,
        TelegramChannel: TelegramChannel,
        SmsChannelProperties: SmsChannelProperties,
        SmsChannel: SmsChannel,
        SlackChannelProperties: SlackChannelProperties,
        SlackChannel: SlackChannel,
        ConnectionItemName: ConnectionItemName,
        ConnectionSettingParameter: ConnectionSettingParameter,
        ConnectionSettingProperties: ConnectionSettingProperties,
        ConnectionSetting: ConnectionSetting,
        ServiceProviderParameter: ServiceProviderParameter,
        ServiceProviderProperties: ServiceProviderProperties,
        ServiceProvider: ServiceProvider,
        ServiceProviderResponseList: ServiceProviderResponseList,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationEntity: OperationEntity,
        CheckNameAvailabilityRequestBody: CheckNameAvailabilityRequestBody,
        CheckNameAvailabilityResponseBody: CheckNameAvailabilityResponseBody,
        EnterpriseChannelCheckNameAvailabilityRequest: EnterpriseChannelCheckNameAvailabilityRequest,
        EnterpriseChannelCheckNameAvailabilityResponse: EnterpriseChannelCheckNameAvailabilityResponse,
        EnterpriseChannelNode: EnterpriseChannelNode,
        EnterpriseChannelProperties: EnterpriseChannelProperties,
        EnterpriseChannel: EnterpriseChannel,
        BotResponseList: BotResponseList,
        ChannelResponseList: ChannelResponseList,
        OperationEntityListResult: OperationEntityListResult,
        ConnectionSettingResponseList: ConnectionSettingResponseList,
        EnterpriseChannelResponseList: EnterpriseChannelResponseList,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BaseResource: BaseResource,
        Bot: Bot,
        BotChannel: BotChannel,
        BotProperties: BotProperties,
        BotResponseList: BotResponseList,
        Channel: Channel,
        CheckNameAvailabilityRequestBody: CheckNameAvailabilityRequestBody,
        CheckNameAvailabilityResponseBody: CheckNameAvailabilityResponseBody,
        ConnectionSetting: ConnectionSetting,
        ConnectionSettingParameter: ConnectionSettingParameter,
        ConnectionSettingProperties: ConnectionSettingProperties,
        DirectLineChannel: DirectLineChannel,
        DirectLineChannelProperties: DirectLineChannelProperties,
        DirectLineSite: DirectLineSite,
        EmailChannel: EmailChannel,
        EmailChannelProperties: EmailChannelProperties,
        EnterpriseChannel: EnterpriseChannel,
        EnterpriseChannelNode: EnterpriseChannelNode,
        EnterpriseChannelProperties: EnterpriseChannelProperties,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        FacebookChannel: FacebookChannel,
        FacebookChannelProperties: FacebookChannelProperties,
        FacebookPage: FacebookPage,
        KikChannel: KikChannel,
        KikChannelProperties: KikChannelProperties,
        MsTeamsChannel: MsTeamsChannel,
        MsTeamsChannelProperties: MsTeamsChannelProperties,
        Resource: Resource,
        Sku: Sku,
        SkypeChannel: SkypeChannel,
        SkypeChannelProperties: SkypeChannelProperties,
        SlackChannel: SlackChannel,
        SlackChannelProperties: SlackChannelProperties,
        SmsChannel: SmsChannel,
        SmsChannelProperties: SmsChannelProperties,
        TelegramChannel: TelegramChannel,
        TelegramChannelProperties: TelegramChannelProperties,
        WebChatChannel: WebChatChannel,
        WebChatChannelProperties: WebChatChannelProperties,
        WebChatSite: WebChatSite
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var channelName0 = {
        parameterPath: "channelName",
        mapper: {
            required: true,
            serializedName: "channelName",
            type: {
                name: "Enum",
                allowedValues: [
                    "FacebookChannel",
                    "EmailChannel",
                    "KikChannel",
                    "TelegramChannel",
                    "SlackChannel",
                    "MsTeamsChannel",
                    "SkypeChannel",
                    "WebChatChannel",
                    "DirectLineChannel",
                    "SmsChannel"
                ]
            }
        }
    };
    var channelName1 = {
        parameterPath: "channelName",
        mapper: {
            required: true,
            serializedName: "channelName",
            constraints: {
                MaxLength: 64,
                MinLength: 2,
                Pattern: /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var connectionName = {
        parameterPath: "connectionName",
        mapper: {
            required: true,
            serializedName: "connectionName",
            constraints: {
                MaxLength: 64,
                MinLength: 2,
                Pattern: /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 64,
                MinLength: 2,
                Pattern: /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var resourceName = {
        parameterPath: "resourceName",
        mapper: {
            required: true,
            serializedName: "resourceName",
            constraints: {
                MaxLength: 64,
                MinLength: 2,
                Pattern: /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/
            },
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Bots. */
    var Bots = /** @class */ (function () {
        /**
         * Create a Bots.
         * @param {AzureBotServiceContext} client Reference to the service client.
         */
        function Bots(client) {
            this.client = client;
        }
        Bots.prototype.create = function (resourceGroupName$$1, resourceName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec, callback);
        };
        Bots.prototype.update = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, updateOperationSpec, callback);
        };
        Bots.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        Bots.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec, callback);
        };
        Bots.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        Bots.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Bots.prototype.getCheckNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, getCheckNameAvailabilityOperationSpec, callback);
        };
        Bots.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        Bots.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Bots;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, Bot, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Bot
            },
            201: {
                bodyMapper: Bot
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var updateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                location: [
                    "options",
                    "location"
                ],
                tags: [
                    "options",
                    "tags"
                ],
                sku: [
                    "options",
                    "sku"
                ],
                kind: [
                    "options",
                    "kind"
                ],
                etag: [
                    "options",
                    "etag"
                ],
                properties: [
                    "options",
                    "properties"
                ]
            },
            mapper: __assign({}, Bot, { required: true })
        },
        responses: {
            200: {
                bodyMapper: Bot
            },
            201: {
                bodyMapper: Bot
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Bot
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.BotService/botServices",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var getCheckNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.BotService/checkNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, CheckNameAvailabilityRequestBody, { required: true })
        },
        responses: {
            200: {
                bodyMapper: CheckNameAvailabilityResponseBody
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BaseResource: BaseResource,
        Bot: Bot,
        BotChannel: BotChannel,
        BotProperties: BotProperties,
        Channel: Channel,
        ChannelResponseList: ChannelResponseList,
        ConnectionSetting: ConnectionSetting,
        ConnectionSettingParameter: ConnectionSettingParameter,
        ConnectionSettingProperties: ConnectionSettingProperties,
        DirectLineChannel: DirectLineChannel,
        DirectLineChannelProperties: DirectLineChannelProperties,
        DirectLineSite: DirectLineSite,
        EmailChannel: EmailChannel,
        EmailChannelProperties: EmailChannelProperties,
        EnterpriseChannel: EnterpriseChannel,
        EnterpriseChannelNode: EnterpriseChannelNode,
        EnterpriseChannelProperties: EnterpriseChannelProperties,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        FacebookChannel: FacebookChannel,
        FacebookChannelProperties: FacebookChannelProperties,
        FacebookPage: FacebookPage,
        KikChannel: KikChannel,
        KikChannelProperties: KikChannelProperties,
        MsTeamsChannel: MsTeamsChannel,
        MsTeamsChannelProperties: MsTeamsChannelProperties,
        Resource: Resource,
        Sku: Sku,
        SkypeChannel: SkypeChannel,
        SkypeChannelProperties: SkypeChannelProperties,
        SlackChannel: SlackChannel,
        SlackChannelProperties: SlackChannelProperties,
        SmsChannel: SmsChannel,
        SmsChannelProperties: SmsChannelProperties,
        TelegramChannel: TelegramChannel,
        TelegramChannelProperties: TelegramChannelProperties,
        WebChatChannel: WebChatChannel,
        WebChatChannelProperties: WebChatChannelProperties,
        WebChatSite: WebChatSite
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Channels. */
    var Channels = /** @class */ (function () {
        /**
         * Create a Channels.
         * @param {AzureBotServiceContext} client Reference to the service client.
         */
        function Channels(client) {
            this.client = client;
        }
        Channels.prototype.create = function (resourceGroupName$$1, resourceName$$1, channelName, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                channelName: channelName,
                parameters: parameters,
                options: options
            }, createOperationSpec$1, callback);
        };
        Channels.prototype.update = function (resourceGroupName$$1, resourceName$$1, channelName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                channelName: channelName,
                options: options
            }, updateOperationSpec$1, callback);
        };
        Channels.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, channelName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                channelName: channelName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Channels.prototype.get = function (resourceGroupName$$1, resourceName$$1, channelName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                channelName: channelName,
                options: options
            }, getOperationSpec$1, callback);
        };
        Channels.prototype.listWithKeys = function (resourceGroupName$$1, resourceName$$1, channelName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                channelName: channelName,
                options: options
            }, listWithKeysOperationSpec, callback);
        };
        Channels.prototype.listByResourceGroup = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        Channels.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return Channels;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            channelName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, BotChannel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BotChannel
            },
            201: {
                bodyMapper: BotChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var updateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            channelName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                location: [
                    "options",
                    "location"
                ],
                tags: [
                    "options",
                    "tags"
                ],
                sku: [
                    "options",
                    "sku"
                ],
                kind: [
                    "options",
                    "kind"
                ],
                etag: [
                    "options",
                    "etag"
                ],
                properties: [
                    "options",
                    "properties"
                ]
            },
            mapper: __assign({}, BotChannel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: BotChannel
            },
            201: {
                bodyMapper: BotChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            channelName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            channelName1,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listWithKeysOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels/{channelName}/listChannelWithKeys",
        urlParameters: [
            resourceGroupName,
            resourceName,
            channelName0,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: BotChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/channels",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChannelResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ChannelResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        OperationDisplayInfo: OperationDisplayInfo,
        OperationEntity: OperationEntity,
        OperationEntityListResult: OperationEntityListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureBotServiceContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        Operations.prototype.listNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "providers/Microsoft.BotService/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationEntityListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BaseResource: BaseResource,
        Bot: Bot,
        BotChannel: BotChannel,
        BotProperties: BotProperties,
        Channel: Channel,
        ConnectionSetting: ConnectionSetting,
        ConnectionSettingParameter: ConnectionSettingParameter,
        ConnectionSettingProperties: ConnectionSettingProperties,
        ConnectionSettingResponseList: ConnectionSettingResponseList,
        DirectLineChannel: DirectLineChannel,
        DirectLineChannelProperties: DirectLineChannelProperties,
        DirectLineSite: DirectLineSite,
        EmailChannel: EmailChannel,
        EmailChannelProperties: EmailChannelProperties,
        EnterpriseChannel: EnterpriseChannel,
        EnterpriseChannelNode: EnterpriseChannelNode,
        EnterpriseChannelProperties: EnterpriseChannelProperties,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        FacebookChannel: FacebookChannel,
        FacebookChannelProperties: FacebookChannelProperties,
        FacebookPage: FacebookPage,
        KikChannel: KikChannel,
        KikChannelProperties: KikChannelProperties,
        MsTeamsChannel: MsTeamsChannel,
        MsTeamsChannelProperties: MsTeamsChannelProperties,
        Resource: Resource,
        ServiceProvider: ServiceProvider,
        ServiceProviderParameter: ServiceProviderParameter,
        ServiceProviderProperties: ServiceProviderProperties,
        ServiceProviderResponseList: ServiceProviderResponseList,
        Sku: Sku,
        SkypeChannel: SkypeChannel,
        SkypeChannelProperties: SkypeChannelProperties,
        SlackChannel: SlackChannel,
        SlackChannelProperties: SlackChannelProperties,
        SmsChannel: SmsChannel,
        SmsChannelProperties: SmsChannelProperties,
        TelegramChannel: TelegramChannel,
        TelegramChannelProperties: TelegramChannelProperties,
        WebChatChannel: WebChatChannel,
        WebChatChannelProperties: WebChatChannelProperties,
        WebChatSite: WebChatSite
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a BotConnection. */
    var BotConnection = /** @class */ (function () {
        /**
         * Create a BotConnection.
         * @param {AzureBotServiceContext} client Reference to the service client.
         */
        function BotConnection(client) {
            this.client = client;
        }
        BotConnection.prototype.listServiceProviders = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listServiceProvidersOperationSpec, callback);
        };
        BotConnection.prototype.listWithSecrets = function (resourceGroupName$$1, resourceName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                connectionName: connectionName$$1,
                options: options
            }, listWithSecretsOperationSpec, callback);
        };
        BotConnection.prototype.create = function (resourceGroupName$$1, resourceName$$1, connectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                connectionName: connectionName$$1,
                parameters: parameters,
                options: options
            }, createOperationSpec$2, callback);
        };
        BotConnection.prototype.update = function (resourceGroupName$$1, resourceName$$1, connectionName$$1, parameters, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                connectionName: connectionName$$1,
                parameters: parameters,
                options: options
            }, updateOperationSpec$2, callback);
        };
        BotConnection.prototype.get = function (resourceGroupName$$1, resourceName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                connectionName: connectionName$$1,
                options: options
            }, getOperationSpec$2, callback);
        };
        BotConnection.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, connectionName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                connectionName: connectionName$$1,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        BotConnection.prototype.listByBotService = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, listByBotServiceOperationSpec, callback);
        };
        BotConnection.prototype.listByBotServiceNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByBotServiceNextOperationSpec, callback);
        };
        return BotConnection;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listServiceProvidersOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.BotService/listAuthServiceProviders",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceProviderResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listWithSecretsOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}/listWithSecrets",
        urlParameters: [
            resourceGroupName,
            resourceName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionSetting
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var createOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionSetting, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionSetting
            },
            201: {
                bodyMapper: ConnectionSetting
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var updateOperationSpec$2 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, ConnectionSetting, { required: true })
        },
        responses: {
            200: {
                bodyMapper: ConnectionSetting
            },
            201: {
                bodyMapper: ConnectionSetting
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionSetting
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/Connections/{connectionName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            connectionName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listByBotServiceOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/botServices/{resourceName}/connections",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionSettingResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };
    var listByBotServiceNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ConnectionSettingResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        BaseResource: BaseResource,
        Bot: Bot,
        BotChannel: BotChannel,
        BotProperties: BotProperties,
        Channel: Channel,
        ConnectionSetting: ConnectionSetting,
        ConnectionSettingParameter: ConnectionSettingParameter,
        ConnectionSettingProperties: ConnectionSettingProperties,
        DirectLineChannel: DirectLineChannel,
        DirectLineChannelProperties: DirectLineChannelProperties,
        DirectLineSite: DirectLineSite,
        EmailChannel: EmailChannel,
        EmailChannelProperties: EmailChannelProperties,
        EnterpriseChannel: EnterpriseChannel,
        EnterpriseChannelCheckNameAvailabilityRequest: EnterpriseChannelCheckNameAvailabilityRequest,
        EnterpriseChannelCheckNameAvailabilityResponse: EnterpriseChannelCheckNameAvailabilityResponse,
        EnterpriseChannelNode: EnterpriseChannelNode,
        EnterpriseChannelProperties: EnterpriseChannelProperties,
        EnterpriseChannelResponseList: EnterpriseChannelResponseList,
        ErrorBody: ErrorBody,
        ErrorModel: ErrorModel,
        FacebookChannel: FacebookChannel,
        FacebookChannelProperties: FacebookChannelProperties,
        FacebookPage: FacebookPage,
        KikChannel: KikChannel,
        KikChannelProperties: KikChannelProperties,
        MsTeamsChannel: MsTeamsChannel,
        MsTeamsChannelProperties: MsTeamsChannelProperties,
        Resource: Resource,
        Sku: Sku,
        SkypeChannel: SkypeChannel,
        SkypeChannelProperties: SkypeChannelProperties,
        SlackChannel: SlackChannel,
        SlackChannelProperties: SlackChannelProperties,
        SmsChannel: SmsChannel,
        SmsChannelProperties: SmsChannelProperties,
        TelegramChannel: TelegramChannel,
        TelegramChannelProperties: TelegramChannelProperties,
        WebChatChannel: WebChatChannel,
        WebChatChannelProperties: WebChatChannelProperties,
        WebChatSite: WebChatSite
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a EnterpriseChannels. */
    var EnterpriseChannels = /** @class */ (function () {
        /**
         * Create a EnterpriseChannels.
         * @param {AzureBotServiceContext} client Reference to the service client.
         */
        function EnterpriseChannels(client) {
            this.client = client;
        }
        EnterpriseChannels.prototype.checkNameAvailability = function (parameters, options, callback) {
            return this.client.sendOperationRequest({
                parameters: parameters,
                options: options
            }, checkNameAvailabilityOperationSpec, callback);
        };
        EnterpriseChannels.prototype.listByResourceGroup = function (resourceGroupName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                options: options
            }, listByResourceGroupOperationSpec$2, callback);
        };
        /**
         * Creates an Enterprise Channel.
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param parameters The parameters to provide for the new Enterprise Channel.
         * @param [options] The optional parameters
         * @returns Promise<Models.EnterpriseChannelsCreateResponse>
         */
        EnterpriseChannels.prototype.create = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.beginCreate(resourceGroupName$$1, resourceName$$1, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates an Enterprise Channel.
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param [options] The optional parameters
         * @returns Promise<Models.EnterpriseChannelsUpdateResponse>
         */
        EnterpriseChannels.prototype.update = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginUpdate(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an Enterprise Channel from the resource group
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        EnterpriseChannels.prototype.deleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.beginDeleteMethod(resourceGroupName$$1, resourceName$$1, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        EnterpriseChannels.prototype.get = function (resourceGroupName$$1, resourceName$$1, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, getOperationSpec$3, callback);
        };
        /**
         * Creates an Enterprise Channel.
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param parameters The parameters to provide for the new Enterprise Channel.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EnterpriseChannels.prototype.beginCreate = function (resourceGroupName$$1, resourceName$$1, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                parameters: parameters,
                options: options
            }, beginCreateOperationSpec, options);
        };
        /**
         * Updates an Enterprise Channel.
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EnterpriseChannels.prototype.beginUpdate = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        /**
         * Deletes an Enterprise Channel from the resource group
         * @param resourceGroupName The name of the Bot resource group in the user subscription.
         * @param resourceName The name of the Bot resource.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        EnterpriseChannels.prototype.beginDeleteMethod = function (resourceGroupName$$1, resourceName$$1, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName$$1,
                resourceName: resourceName$$1,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        EnterpriseChannels.prototype.listByResourceGroupNext = function (nextPageLink$$1, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink$$1,
                options: options
            }, listByResourceGroupNextOperationSpec$2, callback);
        };
        return EnterpriseChannels;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var checkNameAvailabilityOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.BotService/checkEnterpriseChannelNameAvailability",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, EnterpriseChannelCheckNameAvailabilityRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EnterpriseChannelCheckNameAvailabilityResponse
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByResourceGroupOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnterpriseChannelResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnterpriseChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var beginCreateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign({}, EnterpriseChannel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EnterpriseChannel
            },
            201: {
                bodyMapper: EnterpriseChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: {
                location: [
                    "options",
                    "location"
                ],
                tags: [
                    "options",
                    "tags"
                ],
                sku: [
                    "options",
                    "sku"
                ],
                kind: [
                    "options",
                    "kind"
                ],
                etag: [
                    "options",
                    "etag"
                ],
                properties: [
                    "options",
                    "properties"
                ]
            },
            mapper: __assign({}, EnterpriseChannel, { required: true })
        },
        responses: {
            200: {
                bodyMapper: EnterpriseChannel
            },
            201: {
                bodyMapper: EnterpriseChannel
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.BotService/enterpriseChannels/{resourceName}",
        urlParameters: [
            resourceGroupName,
            resourceName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };
    var listByResourceGroupNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: EnterpriseChannelResponseList
            },
            default: {
                bodyMapper: ErrorModel
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-botservice";
    var packageVersion = "1.0.0";
    var AzureBotServiceContext = /** @class */ (function (_super) {
        __extends(AzureBotServiceContext, _super);
        /**
         * Initializes a new instance of the AzureBotService class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function AzureBotServiceContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2018-07-12';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureBotServiceContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureBotService = /** @class */ (function (_super) {
        __extends(AzureBotService, _super);
        /**
         * Initializes a new instance of the AzureBotService class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param subscriptionId Azure Subscription ID.
         * @param [options] The parameter options
         */
        function AzureBotService(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.bots = new Bots(_this);
            _this.channels = new Channels(_this);
            _this.operations = new Operations(_this);
            _this.botConnection = new BotConnection(_this);
            _this.enterpriseChannels = new EnterpriseChannels(_this);
            return _this;
        }
        return AzureBotService;
    }(AzureBotServiceContext));

    exports.AzureBotService = AzureBotService;
    exports.AzureBotServiceContext = AzureBotServiceContext;
    exports.AzureBotServiceModels = index;
    exports.AzureBotServiceMappers = mappers;
    exports.Bots = Bots;
    exports.Channels = Channels;
    exports.Operations = Operations;
    exports.BotConnection = BotConnection;
    exports.EnterpriseChannels = EnterpriseChannels;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-botservice.js.map
