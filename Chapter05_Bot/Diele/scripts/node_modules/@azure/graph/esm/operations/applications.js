/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/applicationsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Applications. */
var Applications = /** @class */ (function () {
    /**
     * Create a Applications.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    function Applications(client) {
        this.client = client;
    }
    Applications.prototype.create = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, createOperationSpec, callback);
    };
    Applications.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Applications.prototype.deleteMethod = function (applicationObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Applications.prototype.get = function (applicationObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            options: options
        }, getOperationSpec, callback);
    };
    Applications.prototype.patch = function (applicationObjectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            parameters: parameters,
            options: options
        }, patchOperationSpec, callback);
    };
    Applications.prototype.listOwners = function (applicationObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            options: options
        }, listOwnersOperationSpec, callback);
    };
    Applications.prototype.addOwner = function (applicationObjectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            parameters: parameters,
            options: options
        }, addOwnerOperationSpec, callback);
    };
    Applications.prototype.removeOwner = function (applicationObjectId, ownerObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            ownerObjectId: ownerObjectId,
            options: options
        }, removeOwnerOperationSpec, callback);
    };
    Applications.prototype.listKeyCredentials = function (applicationObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            options: options
        }, listKeyCredentialsOperationSpec, callback);
    };
    Applications.prototype.updateKeyCredentials = function (applicationObjectId, value, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            value: value,
            options: options
        }, updateKeyCredentialsOperationSpec, callback);
    };
    Applications.prototype.listPasswordCredentials = function (applicationObjectId, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            options: options
        }, listPasswordCredentialsOperationSpec, callback);
    };
    Applications.prototype.updatePasswordCredentials = function (applicationObjectId, value, options, callback) {
        return this.client.sendOperationRequest({
            applicationObjectId: applicationObjectId,
            value: value,
            options: options
        }, updatePasswordCredentialsOperationSpec, callback);
    };
    Applications.prototype.getServicePrincipalsIdByAppId = function (applicationID, options, callback) {
        return this.client.sendOperationRequest({
            applicationID: applicationID,
            options: options
        }, getServicePrincipalsIdByAppIdOperationSpec, callback);
    };
    Applications.prototype.listNext = function (nextLink, options, callback) {
        return this.client.sendOperationRequest({
            nextLink: nextLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    Applications.prototype.listOwnersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listOwnersNextOperationSpec, callback);
    };
    return Applications;
}());
export { Applications };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/applications",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ApplicationCreateParameters), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.Application
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/applications",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/applications/{applicationObjectId}",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/applications/{applicationObjectId}",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Application
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var patchOperationSpec = {
    httpMethod: "PATCH",
    path: "{tenantID}/applications/{applicationObjectId}",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.ApplicationUpdateParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOwnersOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/applications/{applicationObjectId}/owners",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var addOwnerOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/applications/{applicationObjectId}/$links/owners",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.AddOwnerParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var removeOwnerOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/applications/{applicationObjectId}/$links/owners/{ownerObjectId}",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.ownerObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listKeyCredentialsOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/applications/{applicationObjectId}/keyCredentials",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.KeyCredentialListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var updateKeyCredentialsOperationSpec = {
    httpMethod: "PATCH",
    path: "{tenantID}/applications/{applicationObjectId}/keyCredentials",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            value: "value"
        },
        mapper: __assign(__assign({}, Mappers.KeyCredentialsUpdateParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listPasswordCredentialsOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/applications/{applicationObjectId}/passwordCredentials",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.PasswordCredentialListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var updatePasswordCredentialsOperationSpec = {
    httpMethod: "PATCH",
    path: "{tenantID}/applications/{applicationObjectId}/passwordCredentials",
    urlParameters: [
        Parameters.applicationObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: {
            value: "value"
        },
        mapper: __assign(__assign({}, Mappers.PasswordCredentialsUpdateParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getServicePrincipalsIdByAppIdOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/servicePrincipalsByAppId/{applicationID}/objectId",
    urlParameters: [
        Parameters.tenantID,
        Parameters.applicationID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServicePrincipalObjectResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/{nextLink}",
    urlParameters: [
        Parameters.nextLink,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ApplicationListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOwnersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://graph.windows.net",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=applications.js.map