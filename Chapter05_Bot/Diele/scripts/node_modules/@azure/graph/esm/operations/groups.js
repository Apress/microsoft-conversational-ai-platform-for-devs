/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/groupsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Groups. */
var Groups = /** @class */ (function () {
    /**
     * Create a Groups.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    function Groups(client) {
        this.client = client;
    }
    Groups.prototype.isMemberOf = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, isMemberOfOperationSpec, callback);
    };
    Groups.prototype.removeMember = function (groupObjectId, memberObjectId, options, callback) {
        return this.client.sendOperationRequest({
            groupObjectId: groupObjectId,
            memberObjectId: memberObjectId,
            options: options
        }, removeMemberOperationSpec, callback);
    };
    Groups.prototype.addMember = function (groupObjectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            groupObjectId: groupObjectId,
            parameters: parameters,
            options: options
        }, addMemberOperationSpec, callback);
    };
    Groups.prototype.create = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, createOperationSpec, callback);
    };
    Groups.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Groups.prototype.getGroupMembers = function (objectId, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            options: options
        }, getGroupMembersOperationSpec, callback);
    };
    Groups.prototype.get = function (objectId, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            options: options
        }, getOperationSpec, callback);
    };
    Groups.prototype.deleteMethod = function (objectId, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Groups.prototype.getMemberGroups = function (objectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            parameters: parameters,
            options: options
        }, getMemberGroupsOperationSpec, callback);
    };
    Groups.prototype.listOwners = function (objectId, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            options: options
        }, listOwnersOperationSpec, callback);
    };
    Groups.prototype.addOwner = function (objectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            parameters: parameters,
            options: options
        }, addOwnerOperationSpec, callback);
    };
    Groups.prototype.removeOwner = function (objectId, ownerObjectId, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            ownerObjectId: ownerObjectId,
            options: options
        }, removeOwnerOperationSpec, callback);
    };
    Groups.prototype.listNext = function (nextLink, options, callback) {
        return this.client.sendOperationRequest({
            nextLink: nextLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    Groups.prototype.getGroupMembersNext = function (nextLink, options, callback) {
        return this.client.sendOperationRequest({
            nextLink: nextLink,
            options: options
        }, getGroupMembersNextOperationSpec, callback);
    };
    Groups.prototype.listOwnersNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listOwnersNextOperationSpec, callback);
    };
    return Groups;
}());
export { Groups };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var isMemberOfOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/isMemberOf",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.CheckGroupMembershipParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.CheckGroupMembershipResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var removeMemberOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/groups/{groupObjectId}/$links/members/{memberObjectId}",
    urlParameters: [
        Parameters.groupObjectId,
        Parameters.memberObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var addMemberOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/groups/{groupObjectId}/$links/members",
    urlParameters: [
        Parameters.groupObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GroupAddMemberParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var createOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/groups",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GroupCreateParameters), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ADGroup
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/groups",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GroupListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getGroupMembersOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/groups/{objectId}/members",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/groups/{objectId}",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ADGroup
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/groups/{objectId}",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getMemberGroupsOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/groups/{objectId}/getMemberGroups",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.GroupGetMemberGroupsParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.GroupGetMemberGroupsResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOwnersOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/groups/{objectId}/owners",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var addOwnerOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/groups/{objectId}/$links/owners",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.AddOwnerParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var removeOwnerOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/groups/{objectId}/$links/owners/{ownerObjectId}",
    urlParameters: [
        Parameters.objectId,
        Parameters.ownerObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/{nextLink}",
    urlParameters: [
        Parameters.nextLink,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GroupListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getGroupMembersNextOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/{nextLink}",
    urlParameters: [
        Parameters.nextLink,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOwnersNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://graph.windows.net",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DirectoryObjectListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=groups.js.map