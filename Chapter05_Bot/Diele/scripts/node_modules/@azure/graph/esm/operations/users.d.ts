import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
/** Class representing a Users. */
export declare class Users {
    private readonly client;
    /**
     * Create a Users.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    constructor(client: GraphRbacManagementClientContext);
    /**
     * Create a new user.
     * @param parameters Parameters to create a user.
     * @param [options] The optional parameters
     * @returns Promise<Models.UsersCreateResponse>
     */
    create(parameters: Models.UserCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.UsersCreateResponse>;
    /**
     * @param parameters Parameters to create a user.
     * @param callback The callback
     */
    create(parameters: Models.UserCreateParameters, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * @param parameters Parameters to create a user.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(parameters: Models.UserCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * Gets list of users for the current tenant.
     * @param [options] The optional parameters
     * @returns Promise<Models.UsersListResponse>
     */
    list(options?: Models.UsersListOptionalParams): Promise<Models.UsersListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.UserListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.UsersListOptionalParams, callback: msRest.ServiceCallback<Models.UserListResult>): void;
    /**
     * Gets user information from the directory.
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @param [options] The optional parameters
     * @returns Promise<Models.UsersGetResponse>
     */
    get(upnOrObjectId: string, options?: msRest.RequestOptionsBase): Promise<Models.UsersGetResponse>;
    /**
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @param callback The callback
     */
    get(upnOrObjectId: string, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * @param upnOrObjectId The object ID or principal name of the user for which to get information.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(upnOrObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
    /**
     * Updates a user.
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    update(upnOrObjectId: string, parameters: Models.UserUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @param callback The callback
     */
    update(upnOrObjectId: string, parameters: Models.UserUpdateParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param upnOrObjectId The object ID or principal name of the user to update.
     * @param parameters Parameters to update an existing user.
     * @param options The optional parameters
     * @param callback The callback
     */
    update(upnOrObjectId: string, parameters: Models.UserUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Delete a user.
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(upnOrObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @param callback The callback
     */
    deleteMethod(upnOrObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param upnOrObjectId The object ID or principal name of the user to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(upnOrObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a collection that contains the object IDs of the groups of which the user is a member.
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.UsersGetMemberGroupsResponse>
     */
    getMemberGroups(objectId: string, parameters: Models.UserGetMemberGroupsParameters, options?: msRest.RequestOptionsBase): Promise<Models.UsersGetMemberGroupsResponse>;
    /**
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @param callback The callback
     */
    getMemberGroups(objectId: string, parameters: Models.UserGetMemberGroupsParameters, callback: msRest.ServiceCallback<Models.UserGetMemberGroupsResult>): void;
    /**
     * @param objectId The object ID of the user for which to get group membership.
     * @param parameters User filtering parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMemberGroups(objectId: string, parameters: Models.UserGetMemberGroupsParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserGetMemberGroupsResult>): void;
    /**
     * Gets a list of users for the current tenant.
     * @param nextLink Next link for the list operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.UsersListNextResponse>
     */
    listNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.UsersListNextResponse>;
    /**
     * @param nextLink Next link for the list operation.
     * @param callback The callback
     */
    listNext(nextLink: string, callback: msRest.ServiceCallback<Models.UserListResult>): void;
    /**
     * @param nextLink Next link for the list operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserListResult>): void;
}
//# sourceMappingURL=users.d.ts.map