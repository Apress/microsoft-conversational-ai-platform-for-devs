import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
/** Class representing a DeletedApplications. */
export declare class DeletedApplications {
    private readonly client;
    /**
     * Create a DeletedApplications.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    constructor(client: GraphRbacManagementClientContext);
    /**
     * Restores the deleted application in the directory.
     * @param objectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeletedApplicationsRestoreResponse>
     */
    restore(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedApplicationsRestoreResponse>;
    /**
     * @param objectId Application object ID.
     * @param callback The callback
     */
    restore(objectId: string, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * @param objectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    restore(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * Gets a list of deleted applications in the directory.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeletedApplicationsListResponse>
     */
    list(options?: Models.DeletedApplicationsListOptionalParams): Promise<Models.DeletedApplicationsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.DeletedApplicationsListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * Hard-delete an application.
     * @param applicationObjectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    hardDelete(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param callback The callback
     */
    hardDelete(applicationObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    hardDelete(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a list of deleted applications in the directory.
     * @param nextLink Next link for the list operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeletedApplicationsListNextResponse>
     */
    listNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeletedApplicationsListNextResponse>;
    /**
     * @param nextLink Next link for the list operation.
     * @param callback The callback
     */
    listNext(nextLink: string, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * @param nextLink Next link for the list operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
}
//# sourceMappingURL=deletedApplications.d.ts.map