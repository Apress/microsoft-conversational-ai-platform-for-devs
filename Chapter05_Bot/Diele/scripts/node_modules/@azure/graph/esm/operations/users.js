/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/usersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Users. */
var Users = /** @class */ (function () {
    /**
     * Create a Users.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    function Users(client) {
        this.client = client;
    }
    Users.prototype.create = function (parameters, options, callback) {
        return this.client.sendOperationRequest({
            parameters: parameters,
            options: options
        }, createOperationSpec, callback);
    };
    Users.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    Users.prototype.get = function (upnOrObjectId, options, callback) {
        return this.client.sendOperationRequest({
            upnOrObjectId: upnOrObjectId,
            options: options
        }, getOperationSpec, callback);
    };
    Users.prototype.update = function (upnOrObjectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            upnOrObjectId: upnOrObjectId,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    Users.prototype.deleteMethod = function (upnOrObjectId, options, callback) {
        return this.client.sendOperationRequest({
            upnOrObjectId: upnOrObjectId,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Users.prototype.getMemberGroups = function (objectId, parameters, options, callback) {
        return this.client.sendOperationRequest({
            objectId: objectId,
            parameters: parameters,
            options: options
        }, getMemberGroupsOperationSpec, callback);
    };
    Users.prototype.listNext = function (nextLink, options, callback) {
        return this.client.sendOperationRequest({
            nextLink: nextLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Users;
}());
export { Users };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var createOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/users",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.UserCreateParameters), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/users",
    urlParameters: [
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/users/{upnOrObjectId}",
    urlParameters: [
        Parameters.upnOrObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.User
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "{tenantID}/users/{upnOrObjectId}",
    urlParameters: [
        Parameters.upnOrObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.UserUpdateParameters), { required: true })
    },
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "{tenantID}/users/{upnOrObjectId}",
    urlParameters: [
        Parameters.upnOrObjectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var getMemberGroupsOperationSpec = {
    httpMethod: "POST",
    path: "{tenantID}/users/{objectId}/getMemberGroups",
    urlParameters: [
        Parameters.objectId,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.UserGetMemberGroupsParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.UserGetMemberGroupsResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    path: "{tenantID}/{nextLink}",
    urlParameters: [
        Parameters.nextLink,
        Parameters.tenantID
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.UserListResult
        },
        default: {
            bodyMapper: Mappers.GraphError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=users.js.map