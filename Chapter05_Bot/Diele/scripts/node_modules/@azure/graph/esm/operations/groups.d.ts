import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
/** Class representing a Groups. */
export declare class Groups {
    private readonly client;
    /**
     * Create a Groups.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    constructor(client: GraphRbacManagementClientContext);
    /**
     * Checks whether the specified user, group, contact, or service principal is a direct or
     * transitive member of the specified group.
     * @param parameters The check group membership parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsIsMemberOfResponse>
     */
    isMemberOf(parameters: Models.CheckGroupMembershipParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsIsMemberOfResponse>;
    /**
     * @param parameters The check group membership parameters.
     * @param callback The callback
     */
    isMemberOf(parameters: Models.CheckGroupMembershipParameters, callback: msRest.ServiceCallback<Models.CheckGroupMembershipResult>): void;
    /**
     * @param parameters The check group membership parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    isMemberOf(parameters: Models.CheckGroupMembershipParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckGroupMembershipResult>): void;
    /**
     * Remove a member from a group.
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    removeMember(groupObjectId: string, memberObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id
     * @param callback The callback
     */
    removeMember(groupObjectId: string, memberObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupObjectId The object ID of the group from which to remove the member.
     * @param memberObjectId Member object id
     * @param options The optional parameters
     * @param callback The callback
     */
    removeMember(groupObjectId: string, memberObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Add a member to a group.
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param callback The callback
     */
    addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupObjectId The object ID of the group to which to add the member.
     * @param parameters The URL of the member object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param options The optional parameters
     * @param callback The callback
     */
    addMember(groupObjectId: string, parameters: Models.GroupAddMemberParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Create a group in the directory.
     * @param parameters The parameters for the group to create.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsCreateResponse>
     */
    create(parameters: Models.GroupCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsCreateResponse>;
    /**
     * @param parameters The parameters for the group to create.
     * @param callback The callback
     */
    create(parameters: Models.GroupCreateParameters, callback: msRest.ServiceCallback<Models.ADGroup>): void;
    /**
     * @param parameters The parameters for the group to create.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(parameters: Models.GroupCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ADGroup>): void;
    /**
     * Gets list of groups for the current tenant.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsListResponse>
     */
    list(options?: Models.GroupsListOptionalParams): Promise<Models.GroupsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.GroupListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.GroupsListOptionalParams, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
    /**
     * Gets the members of a group.
     * @param objectId The object ID of the group whose members should be retrieved.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsGetGroupMembersResponse>
     */
    getGroupMembers(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetGroupMembersResponse>;
    /**
     * @param objectId The object ID of the group whose members should be retrieved.
     * @param callback The callback
     */
    getGroupMembers(objectId: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param objectId The object ID of the group whose members should be retrieved.
     * @param options The optional parameters
     * @param callback The callback
     */
    getGroupMembers(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * Gets group information from the directory.
     * @param objectId The object ID of the user for which to get group information.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsGetResponse>
     */
    get(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetResponse>;
    /**
     * @param objectId The object ID of the user for which to get group information.
     * @param callback The callback
     */
    get(objectId: string, callback: msRest.ServiceCallback<Models.ADGroup>): void;
    /**
     * @param objectId The object ID of the user for which to get group information.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ADGroup>): void;
    /**
     * Delete a group from the directory.
     * @param objectId The object ID of the group to delete.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(objectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param objectId The object ID of the group to delete.
     * @param callback The callback
     */
    deleteMethod(objectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param objectId The object ID of the group to delete.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a collection of object IDs of groups of which the specified group is a member.
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsGetMemberGroupsResponse>
     */
    getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetMemberGroupsResponse>;
    /**
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @param callback The callback
     */
    getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, callback: msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>): void;
    /**
     * @param objectId The object ID of the group for which to get group membership.
     * @param parameters Group filtering parameters.
     * @param options The optional parameters
     * @param callback The callback
     */
    getMemberGroups(objectId: string, parameters: Models.GroupGetMemberGroupsParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupGetMemberGroupsResult>): void;
    /**
     * The owners are a set of non-admin users who are allowed to modify this object.
     * @summary Directory objects that are owners of the group.
     * @param objectId The object ID of the group for which to get owners.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsListOwnersResponse>
     */
    listOwners(objectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListOwnersResponse>;
    /**
     * @param objectId The object ID of the group for which to get owners.
     * @param callback The callback
     */
    listOwners(objectId: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param objectId The object ID of the group for which to get owners.
     * @param options The optional parameters
     * @param callback The callback
     */
    listOwners(objectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * Add an owner to a group.
     * @param objectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    addOwner(objectId: string, parameters: Models.AddOwnerParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param objectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param callback The callback
     */
    addOwner(objectId: string, parameters: Models.AddOwnerParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param objectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param options The optional parameters
     * @param callback The callback
     */
    addOwner(objectId: string, parameters: Models.AddOwnerParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Remove a member from owners.
     * @param objectId The object ID of the group from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    removeOwner(objectId: string, ownerObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param objectId The object ID of the group from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param callback The callback
     */
    removeOwner(objectId: string, ownerObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param objectId The object ID of the group from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param options The optional parameters
     * @param callback The callback
     */
    removeOwner(objectId: string, ownerObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets a list of groups for the current tenant.
     * @param nextLink Next link for the list operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsListNextResponse>
     */
    listNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListNextResponse>;
    /**
     * @param nextLink Next link for the list operation.
     * @param callback The callback
     */
    listNext(nextLink: string, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
    /**
     * @param nextLink Next link for the list operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GroupListResult>): void;
    /**
     * Gets the members of a group.
     * @param nextLink Next link for the list operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsGetGroupMembersNextResponse>
     */
    getGroupMembersNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsGetGroupMembersNextResponse>;
    /**
     * @param nextLink Next link for the list operation.
     * @param callback The callback
     */
    getGroupMembersNext(nextLink: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param nextLink Next link for the list operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    getGroupMembersNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * The owners are a set of non-admin users who are allowed to modify this object.
     * @summary Directory objects that are owners of the group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.GroupsListOwnersNextResponse>
     */
    listOwnersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.GroupsListOwnersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listOwnersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listOwnersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
}
//# sourceMappingURL=groups.d.ts.map