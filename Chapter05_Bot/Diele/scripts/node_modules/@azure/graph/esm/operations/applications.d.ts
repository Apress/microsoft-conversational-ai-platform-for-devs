import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { GraphRbacManagementClientContext } from "../graphRbacManagementClientContext";
/** Class representing a Applications. */
export declare class Applications {
    private readonly client;
    /**
     * Create a Applications.
     * @param {GraphRbacManagementClientContext} client Reference to the service client.
     */
    constructor(client: GraphRbacManagementClientContext);
    /**
     * Create a new application.
     * @param parameters The parameters for creating an application.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsCreateResponse>
     */
    create(parameters: Models.ApplicationCreateParameters, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsCreateResponse>;
    /**
     * @param parameters The parameters for creating an application.
     * @param callback The callback
     */
    create(parameters: Models.ApplicationCreateParameters, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * @param parameters The parameters for creating an application.
     * @param options The optional parameters
     * @param callback The callback
     */
    create(parameters: Models.ApplicationCreateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * Lists applications by filter parameters.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListResponse>
     */
    list(options?: Models.ApplicationsListOptionalParams): Promise<Models.ApplicationsListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.ApplicationsListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * Delete an application.
     * @param applicationObjectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param callback The callback
     */
    deleteMethod(applicationObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get an application by object ID.
     * @param applicationObjectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsGetResponse>
     */
    get(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsGetResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param callback The callback
     */
    get(applicationObjectId: string, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Application>): void;
    /**
     * Update an existing application.
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    patch(applicationObjectId: string, parameters: Models.ApplicationUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @param callback The callback
     */
    patch(applicationObjectId: string, parameters: Models.ApplicationUpdateParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param parameters Parameters to update an existing application.
     * @param options The optional parameters
     * @param callback The callback
     */
    patch(applicationObjectId: string, parameters: Models.ApplicationUpdateParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * The owners are a set of non-admin users who are allowed to modify this object.
     * @summary Directory objects that are owners of the application.
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListOwnersResponse>
     */
    listOwners(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListOwnersResponse>;
    /**
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @param callback The callback
     */
    listOwners(applicationObjectId: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param applicationObjectId The object ID of the application for which to get owners.
     * @param options The optional parameters
     * @param callback The callback
     */
    listOwners(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * Add an owner to an application.
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    addOwner(applicationObjectId: string, parameters: Models.AddOwnerParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param callback The callback
     */
    addOwner(applicationObjectId: string, parameters: Models.AddOwnerParameters, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId The object ID of the application to which to add the owner.
     * @param parameters The URL of the owner object, such as
     * https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd.
     * @param options The optional parameters
     * @param callback The callback
     */
    addOwner(applicationObjectId: string, parameters: Models.AddOwnerParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Remove a member from owners.
     * @param applicationObjectId The object ID of the application from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    removeOwner(applicationObjectId: string, ownerObjectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId The object ID of the application from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param callback The callback
     */
    removeOwner(applicationObjectId: string, ownerObjectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId The object ID of the application from which to remove the owner.
     * @param ownerObjectId Owner object id
     * @param options The optional parameters
     * @param callback The callback
     */
    removeOwner(applicationObjectId: string, ownerObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the keyCredentials associated with an application.
     * @param applicationObjectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListKeyCredentialsResponse>
     */
    listKeyCredentials(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListKeyCredentialsResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param callback The callback
     */
    listKeyCredentials(applicationObjectId: string, callback: msRest.ServiceCallback<Models.KeyCredentialListResult>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listKeyCredentials(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KeyCredentialListResult>): void;
    /**
     * Update the keyCredentials associated with an application.
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    updateKeyCredentials(applicationObjectId: string, value: Models.KeyCredential[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @param callback The callback
     */
    updateKeyCredentials(applicationObjectId: string, value: Models.KeyCredential[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param value A collection of KeyCredentials.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateKeyCredentials(applicationObjectId: string, value: Models.KeyCredential[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Get the passwordCredentials associated with an application.
     * @param applicationObjectId Application object ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListPasswordCredentialsResponse>
     */
    listPasswordCredentials(applicationObjectId: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListPasswordCredentialsResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param callback The callback
     */
    listPasswordCredentials(applicationObjectId: string, callback: msRest.ServiceCallback<Models.PasswordCredentialListResult>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listPasswordCredentials(applicationObjectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PasswordCredentialListResult>): void;
    /**
     * Update passwordCredentials associated with an application.
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    updatePasswordCredentials(applicationObjectId: string, value: Models.PasswordCredential[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @param callback The callback
     */
    updatePasswordCredentials(applicationObjectId: string, value: Models.PasswordCredential[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param applicationObjectId Application object ID.
     * @param value A collection of PasswordCredentials.
     * @param options The optional parameters
     * @param callback The callback
     */
    updatePasswordCredentials(applicationObjectId: string, value: Models.PasswordCredential[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Gets an object id for a given application id from the current tenant.
     * @param applicationID The application ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsGetServicePrincipalsIdByAppIdResponse>
     */
    getServicePrincipalsIdByAppId(applicationID: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsGetServicePrincipalsIdByAppIdResponse>;
    /**
     * @param applicationID The application ID.
     * @param callback The callback
     */
    getServicePrincipalsIdByAppId(applicationID: string, callback: msRest.ServiceCallback<Models.ServicePrincipalObjectResult>): void;
    /**
     * @param applicationID The application ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    getServicePrincipalsIdByAppId(applicationID: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServicePrincipalObjectResult>): void;
    /**
     * Gets a list of applications from the current tenant.
     * @param nextLink Next link for the list operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListNextResponse>
     */
    listNext(nextLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListNextResponse>;
    /**
     * @param nextLink Next link for the list operation.
     * @param callback The callback
     */
    listNext(nextLink: string, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * @param nextLink Next link for the list operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
    /**
     * The owners are a set of non-admin users who are allowed to modify this object.
     * @summary Directory objects that are owners of the application.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ApplicationsListOwnersNextResponse>
     */
    listOwnersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ApplicationsListOwnersNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listOwnersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listOwnersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DirectoryObjectListResult>): void;
}
//# sourceMappingURL=applications.d.ts.map