import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";
/** Class representing a Providers. */
export declare class Providers {
    private readonly client;
    /**
     * Create a Providers.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ResourceManagementClientContext);
    /**
     * Unregisters a subscription from a resource provider.
     * @param resourceProviderNamespace The namespace of the resource provider to unregister.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersUnregisterResponse>
     */
    unregister(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase): Promise<Models.ProvidersUnregisterResponse>;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider to unregister.
     * @param callback The callback
     */
    unregister(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider to unregister.
     * @param options The optional parameters
     * @param callback The callback
     */
    unregister(resourceProviderNamespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * Registers a subscription with a resource provider.
     * @param resourceProviderNamespace The namespace of the resource provider to register.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersRegisterResponse>
     */
    register(resourceProviderNamespace: string, options?: msRest.RequestOptionsBase): Promise<Models.ProvidersRegisterResponse>;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider to register.
     * @param callback The callback
     */
    register(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider to register.
     * @param options The optional parameters
     * @param callback The callback
     */
    register(resourceProviderNamespace: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * Gets all resource providers for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersListResponse>
     */
    list(options?: Models.ProvidersListOptionalParams): Promise<Models.ProvidersListResponse>;
    /**
     * @param callback The callback
     */
    list(callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    list(options: Models.ProvidersListOptionalParams, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * Gets all resource providers for the tenant.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersListAtTenantScopeResponse>
     */
    listAtTenantScope(options?: Models.ProvidersListAtTenantScopeOptionalParams): Promise<Models.ProvidersListAtTenantScopeResponse>;
    /**
     * @param callback The callback
     */
    listAtTenantScope(callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtTenantScope(options: Models.ProvidersListAtTenantScopeOptionalParams, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * Gets the specified resource provider.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersGetResponse>
     */
    get(resourceProviderNamespace: string, options?: Models.ProvidersGetOptionalParams): Promise<Models.ProvidersGetResponse>;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param callback The callback
     */
    get(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceProviderNamespace: string, options: Models.ProvidersGetOptionalParams, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * Gets the specified resource provider at the tenant level.
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersGetAtTenantScopeResponse>
     */
    getAtTenantScope(resourceProviderNamespace: string, options?: Models.ProvidersGetAtTenantScopeOptionalParams): Promise<Models.ProvidersGetAtTenantScopeResponse>;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param callback The callback
     */
    getAtTenantScope(resourceProviderNamespace: string, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * @param resourceProviderNamespace The namespace of the resource provider.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtTenantScope(resourceProviderNamespace: string, options: Models.ProvidersGetAtTenantScopeOptionalParams, callback: msRest.ServiceCallback<Models.Provider>): void;
    /**
     * Gets all resource providers for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersListNextResponse>
     */
    listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProvidersListNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * Gets all resource providers for the tenant.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ProvidersListAtTenantScopeNextResponse>
     */
    listAtTenantScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ProvidersListAtTenantScopeNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAtTenantScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtTenantScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProviderListResult>): void;
}
//# sourceMappingURL=providers.d.ts.map