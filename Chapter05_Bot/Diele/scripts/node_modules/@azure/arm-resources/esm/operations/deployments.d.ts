import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { ResourceManagementClientContext } from "../resourceManagementClientContext";
/** Class representing a Deployments. */
export declare class Deployments {
    private readonly client;
    /**
     * Create a Deployments.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    constructor(client: ResourceManagementClientContext);
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Checks whether the deployment exists.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCheckExistenceAtScopeResponse>
     */
    checkExistenceAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtScopeResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    checkExistenceAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistenceAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at a given scope.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
     */
    createOrUpdateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>;
    /**
     * Gets a deployment.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsGetAtScopeResponse>
     */
    getAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtScopeResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    getAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
     * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
     * deployment stops the currently running template deployment and leaves the resources partially
     * deployed.
     * @summary Cancels a currently running template deployment.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    cancelAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    cancelAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancelAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure
     * Resource Manager..
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsValidateAtScopeResponse>
     */
    validateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtScopeResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param callback The callback
     */
    validateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * Exports the template used for specified deployment.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsExportTemplateAtScopeResponse>
     */
    exportTemplateAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtScopeResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    exportTemplateAtScope(scope: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplateAtScope(scope: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * Get all the deployments at the given scope.
     * @param scope The scope of a deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtScopeResponse>
     */
    listAtScope(scope: string, options?: Models.DeploymentsListAtScopeOptionalParams): Promise<Models.DeploymentsListAtScopeResponse>;
    /**
     * @param scope The scope of a deployment.
     * @param callback The callback
     */
    listAtScope(scope: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param scope The scope of a deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtScope(scope: string, options: Models.DeploymentsListAtScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Checks whether the deployment exists.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>
     */
    checkExistenceAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtTenantScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    checkExistenceAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistenceAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at tenant scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
     */
    createOrUpdateAtTenantScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>;
    /**
     * Gets a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsGetAtTenantScopeResponse>
     */
    getAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtTenantScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    getAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
     * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
     * deployment stops the currently running template deployment and leaves the resources partially
     * deployed.
     * @summary Cancels a currently running template deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    cancelAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    cancelAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancelAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure
     * Resource Manager..
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsValidateAtTenantScopeResponse>
     */
    validateAtTenantScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtTenantScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param callback The callback
     */
    validateAtTenantScope(deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateAtTenantScope(deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * Exports the template used for specified deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>
     */
    exportTemplateAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtTenantScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    exportTemplateAtTenantScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplateAtTenantScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * Get all the deployments at the tenant scope.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtTenantScopeResponse>
     */
    listAtTenantScope(options?: Models.DeploymentsListAtTenantScopeOptionalParams): Promise<Models.DeploymentsListAtTenantScopeResponse>;
    /**
     * @param callback The callback
     */
    listAtTenantScope(callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtTenantScope(options: Models.DeploymentsListAtTenantScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Checks whether the deployment exists.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>
     */
    checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtManagementGroupScopeResponse>;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistenceAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at management group scope.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
     */
    createOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>;
    /**
     * Gets a deployment.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>
     */
    getAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtManagementGroupScopeResponse>;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    getAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
     * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
     * deployment stops the currently running template deployment and leaves the resources partially
     * deployed.
     * @summary Cancels a currently running template deployment.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    cancelAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    cancelAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancelAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure
     * Resource Manager..
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>
     */
    validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtManagementGroupScopeResponse>;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param callback The callback
     */
    validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * Exports the template used for specified deployment.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>
     */
    exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtManagementGroupScopeResponse>;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplateAtManagementGroupScope(groupId: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * Get all the deployments for a management group.
     * @param groupId The management group ID.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtManagementGroupScopeResponse>
     */
    listAtManagementGroupScope(groupId: string, options?: Models.DeploymentsListAtManagementGroupScopeOptionalParams): Promise<Models.DeploymentsListAtManagementGroupScopeResponse>;
    /**
     * @param groupId The management group ID.
     * @param callback The callback
     */
    listAtManagementGroupScope(groupId: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param groupId The management group ID.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtManagementGroupScope(groupId: string, options: Models.DeploymentsListAtManagementGroupScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Checks whether the deployment exists.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>
     */
    checkExistenceAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceAtSubscriptionScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    checkExistenceAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistenceAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at subscription scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
     */
    createOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>;
    /**
     * Gets a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>
     */
    getAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetAtSubscriptionScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    getAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    getAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
     * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
     * deployment stops the currently running template deployment and leaves the resources partially
     * deployed.
     * @summary Cancels a currently running template deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    cancelAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    cancelAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancelAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure
     * Resource Manager..
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>
     */
    validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateAtSubscriptionScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param callback The callback
     */
    validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the
     * subscription.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to What If.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
     */
    whatIfAtSubscriptionScope(deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>;
    /**
     * Exports the template used for specified deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>
     */
    exportTemplateAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateAtSubscriptionScopeResponse>;
    /**
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    exportTemplateAtSubscriptionScope(deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplateAtSubscriptionScope(deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * Get all the deployments for a subscription.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtSubscriptionScopeResponse>
     */
    listAtSubscriptionScope(options?: Models.DeploymentsListAtSubscriptionScopeOptionalParams): Promise<Models.DeploymentsListAtSubscriptionScopeResponse>;
    /**
     * @param callback The callback
     */
    listAtSubscriptionScope(callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtSubscriptionScope(options: Models.DeploymentsListAtSubscriptionScopeOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. Deleting a template deployment does not
     * affect the state of the resource group. This is an asynchronous operation that returns a status
     * of 202 until the template deployment is successfully deleted. The Location response header
     * contains the URI that is used to obtain the status of the process. While the process is running,
     * a call to the URI in the Location header returns a status of 202. When the process finishes, the
     * URI in the Location header returns a status of 204 on success. If the asynchronous request
     * failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param resourceGroupName The name of the resource group with the deployment to delete. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * Checks whether the deployment exists.
     * @param resourceGroupName The name of the resource group with the deployment to check. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCheckExistenceResponse>
     */
    checkExistence(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCheckExistenceResponse>;
    /**
     * @param resourceGroupName The name of the resource group with the deployment to check. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    checkExistence(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param resourceGroupName The name of the resource group with the deployment to check. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    checkExistence(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources to a resource group.
     * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
     * case insensitive. The resource group must already exist.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCreateOrUpdateResponse>;
    /**
     * Gets a deployment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsGetResponse>
     */
    get(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    get(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExtended>): void;
    /**
     * You can cancel a deployment only if the provisioningState is Accepted or Running. After the
     * deployment is canceled, the provisioningState is set to Canceled. Canceling a template
     * deployment stops the currently running template deployment and leaves the resource group
     * partially deployed.
     * @summary Cancels a currently running template deployment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    cancel(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    cancel(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancel(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Validates whether the specified template is syntactically correct and will be accepted by Azure
     * Resource Manager..
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsValidateResponse>
     */
    validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsValidateResponse>;
    /**
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param callback The callback
     */
    validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param options The optional parameters
     * @param callback The callback
     */
    validate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentValidateResult>): void;
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource
     * group.
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsWhatIfResponse>
     */
    whatIf(resourceGroupName: string, deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsWhatIfResponse>;
    /**
     * Exports the template used for specified deployment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsExportTemplateResponse>
     */
    exportTemplate(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsExportTemplateResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param callback The callback
     */
    exportTemplate(resourceGroupName: string, deploymentName: string, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportTemplate(resourceGroupName: string, deploymentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentExportResult>): void;
    /**
     * Get all the deployments for a resource group.
     * @param resourceGroupName The name of the resource group with the deployments to get. The name is
     * case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListByResourceGroupResponse>
     */
    listByResourceGroup(resourceGroupName: string, options?: Models.DeploymentsListByResourceGroupOptionalParams): Promise<Models.DeploymentsListByResourceGroupResponse>;
    /**
     * @param resourceGroupName The name of the resource group with the deployments to get. The name is
     * case insensitive.
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param resourceGroupName The name of the resource group with the deployments to get. The name is
     * case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroup(resourceGroupName: string, options: Models.DeploymentsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * Calculate the hash of the given template.
     * @param template The template provided to calculate hash.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCalculateTemplateHashResponse>
     */
    calculateTemplateHash(template: any, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsCalculateTemplateHashResponse>;
    /**
     * @param template The template provided to calculate hash.
     * @param callback The callback
     */
    calculateTemplateHash(template: any, callback: msRest.ServiceCallback<Models.TemplateHashResult>): void;
    /**
     * @param template The template provided to calculate hash.
     * @param options The optional parameters
     * @param callback The callback
     */
    calculateTemplateHash(template: any, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TemplateHashResult>): void;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteAtScope(scope: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at a given scope.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateAtScope(scope: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteAtTenantScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at tenant scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateAtTenantScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteAtManagementGroupScope(groupId: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at management group scope.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateAtManagementGroupScope(groupId: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteAtSubscriptionScope(deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at subscription scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdateAtSubscriptionScope(deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the
     * subscription.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to What If.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginWhatIfAtSubscriptionScope(deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. Deleting a template deployment does not
     * affect the state of the resource group. This is an asynchronous operation that returns a status
     * of 202 until the template deployment is successfully deleted. The Location response header
     * contains the URI that is used to obtain the status of the process. While the process is running,
     * a call to the URI in the Location header returns a status of 202. When the process finishes, the
     * URI in the Location header returns a status of 204 on success. If the asynchronous request
     * failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param resourceGroupName The name of the resource group with the deployment to delete. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginDeleteMethod(resourceGroupName: string, deploymentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources to a resource group.
     * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
     * case insensitive. The resource group must already exist.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, deploymentName: string, parameters: Models.Deployment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource
     * group.
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginWhatIf(resourceGroupName: string, deploymentName: string, parameters: Models.DeploymentWhatIf, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
    /**
     * Get all the deployments at the given scope.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtScopeNextResponse>
     */
    listAtScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtScopeNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAtScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * Get all the deployments at the tenant scope.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtTenantScopeNextResponse>
     */
    listAtTenantScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtTenantScopeNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAtTenantScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtTenantScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * Get all the deployments for a management group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>
     */
    listAtManagementGroupScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtManagementGroupScopeNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAtManagementGroupScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtManagementGroupScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * Get all the deployments for a subscription.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>
     */
    listAtSubscriptionScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListAtSubscriptionScopeNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listAtSubscriptionScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listAtSubscriptionScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * Get all the deployments for a resource group.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsListByResourceGroupNextResponse>
     */
    listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DeploymentsListByResourceGroupNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentListResult>): void;
}
//# sourceMappingURL=deployments.d.ts.map