/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/deploymentsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Deployments. */
var Deployments = /** @class */ (function () {
    /**
     * Create a Deployments.
     * @param {ResourceManagementClientContext} client Reference to the service client.
     */
    function Deployments(client) {
        this.client = client;
    }
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Deployments.prototype.deleteAtScope = function (scope, deploymentName, options) {
        return this.beginDeleteAtScope(scope, deploymentName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.checkExistenceAtScope = function (scope, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            deploymentName: deploymentName,
            options: options
        }, checkExistenceAtScopeOperationSpec, callback);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at a given scope.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtScopeResponse>
     */
    Deployments.prototype.createOrUpdateAtScope = function (scope, deploymentName, parameters, options) {
        return this.beginCreateOrUpdateAtScope(scope, deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.getAtScope = function (scope, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            deploymentName: deploymentName,
            options: options
        }, getAtScopeOperationSpec, callback);
    };
    Deployments.prototype.cancelAtScope = function (scope, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            deploymentName: deploymentName,
            options: options
        }, cancelAtScopeOperationSpec, callback);
    };
    Deployments.prototype.validateAtScope = function (scope, deploymentName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, validateAtScopeOperationSpec, callback);
    };
    Deployments.prototype.exportTemplateAtScope = function (scope, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            deploymentName: deploymentName,
            options: options
        }, exportTemplateAtScopeOperationSpec, callback);
    };
    Deployments.prototype.listAtScope = function (scope, options, callback) {
        return this.client.sendOperationRequest({
            scope: scope,
            options: options
        }, listAtScopeOperationSpec, callback);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Deployments.prototype.deleteAtTenantScope = function (deploymentName, options) {
        return this.beginDeleteAtTenantScope(deploymentName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.checkExistenceAtTenantScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, checkExistenceAtTenantScopeOperationSpec, callback);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at tenant scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtTenantScopeResponse>
     */
    Deployments.prototype.createOrUpdateAtTenantScope = function (deploymentName, parameters, options) {
        return this.beginCreateOrUpdateAtTenantScope(deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.getAtTenantScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, getAtTenantScopeOperationSpec, callback);
    };
    Deployments.prototype.cancelAtTenantScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, cancelAtTenantScopeOperationSpec, callback);
    };
    Deployments.prototype.validateAtTenantScope = function (deploymentName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, validateAtTenantScopeOperationSpec, callback);
    };
    Deployments.prototype.exportTemplateAtTenantScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, exportTemplateAtTenantScopeOperationSpec, callback);
    };
    Deployments.prototype.listAtTenantScope = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAtTenantScopeOperationSpec, callback);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Deployments.prototype.deleteAtManagementGroupScope = function (groupId, deploymentName, options) {
        return this.beginDeleteAtManagementGroupScope(groupId, deploymentName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.checkExistenceAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            deploymentName: deploymentName,
            options: options
        }, checkExistenceAtManagementGroupScopeOperationSpec, callback);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at management group scope.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtManagementGroupScopeResponse>
     */
    Deployments.prototype.createOrUpdateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
        return this.beginCreateOrUpdateAtManagementGroupScope(groupId, deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.getAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            deploymentName: deploymentName,
            options: options
        }, getAtManagementGroupScopeOperationSpec, callback);
    };
    Deployments.prototype.cancelAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            deploymentName: deploymentName,
            options: options
        }, cancelAtManagementGroupScopeOperationSpec, callback);
    };
    Deployments.prototype.validateAtManagementGroupScope = function (groupId, deploymentName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, validateAtManagementGroupScopeOperationSpec, callback);
    };
    Deployments.prototype.exportTemplateAtManagementGroupScope = function (groupId, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            deploymentName: deploymentName,
            options: options
        }, exportTemplateAtManagementGroupScopeOperationSpec, callback);
    };
    Deployments.prototype.listAtManagementGroupScope = function (groupId, options, callback) {
        return this.client.sendOperationRequest({
            groupId: groupId,
            options: options
        }, listAtManagementGroupScopeOperationSpec, callback);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Deployments.prototype.deleteAtSubscriptionScope = function (deploymentName, options) {
        return this.beginDeleteAtSubscriptionScope(deploymentName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.checkExistenceAtSubscriptionScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, checkExistenceAtSubscriptionScopeOperationSpec, callback);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at subscription scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateAtSubscriptionScopeResponse>
     */
    Deployments.prototype.createOrUpdateAtSubscriptionScope = function (deploymentName, parameters, options) {
        return this.beginCreateOrUpdateAtSubscriptionScope(deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.getAtSubscriptionScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, getAtSubscriptionScopeOperationSpec, callback);
    };
    Deployments.prototype.cancelAtSubscriptionScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, cancelAtSubscriptionScopeOperationSpec, callback);
    };
    Deployments.prototype.validateAtSubscriptionScope = function (deploymentName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, validateAtSubscriptionScopeOperationSpec, callback);
    };
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the
     * subscription.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to What If.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsWhatIfAtSubscriptionScopeResponse>
     */
    Deployments.prototype.whatIfAtSubscriptionScope = function (deploymentName, parameters, options) {
        return this.beginWhatIfAtSubscriptionScope(deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.exportTemplateAtSubscriptionScope = function (deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            deploymentName: deploymentName,
            options: options
        }, exportTemplateAtSubscriptionScopeOperationSpec, callback);
    };
    Deployments.prototype.listAtSubscriptionScope = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listAtSubscriptionScopeOperationSpec, callback);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. Deleting a template deployment does not
     * affect the state of the resource group. This is an asynchronous operation that returns a status
     * of 202 until the template deployment is successfully deleted. The Location response header
     * contains the URI that is used to obtain the status of the process. While the process is running,
     * a call to the URI in the Location header returns a status of 202. When the process finishes, the
     * URI in the Location header returns a status of 204 on success. If the asynchronous request
     * failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param resourceGroupName The name of the resource group with the deployment to delete. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Deployments.prototype.deleteMethod = function (resourceGroupName, deploymentName, options) {
        return this.beginDeleteMethod(resourceGroupName, deploymentName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.checkExistence = function (resourceGroupName, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            options: options
        }, checkExistenceOperationSpec, callback);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources to a resource group.
     * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
     * case insensitive. The resource group must already exist.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsCreateOrUpdateResponse>
     */
    Deployments.prototype.createOrUpdate = function (resourceGroupName, deploymentName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.get = function (resourceGroupName, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            options: options
        }, getOperationSpec, callback);
    };
    Deployments.prototype.cancel = function (resourceGroupName, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            options: options
        }, cancelOperationSpec, callback);
    };
    Deployments.prototype.validate = function (resourceGroupName, deploymentName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, validateOperationSpec, callback);
    };
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource
     * group.
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<Models.DeploymentsWhatIfResponse>
     */
    Deployments.prototype.whatIf = function (resourceGroupName, deploymentName, parameters, options) {
        return this.beginWhatIf(resourceGroupName, deploymentName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Deployments.prototype.exportTemplate = function (resourceGroupName, deploymentName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            options: options
        }, exportTemplateOperationSpec, callback);
    };
    Deployments.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    Deployments.prototype.calculateTemplateHash = function (template, options, callback) {
        return this.client.sendOperationRequest({
            template: template,
            options: options
        }, calculateTemplateHashOperationSpec, callback);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginDeleteAtScope = function (scope, deploymentName, options) {
        return this.client.sendLRORequest({
            scope: scope,
            deploymentName: deploymentName,
            options: options
        }, beginDeleteAtScopeOperationSpec, options);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at a given scope.
     * @param scope The scope of a deployment.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginCreateOrUpdateAtScope = function (scope, deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            scope: scope,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateAtScopeOperationSpec, options);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginDeleteAtTenantScope = function (deploymentName, options) {
        return this.client.sendLRORequest({
            deploymentName: deploymentName,
            options: options
        }, beginDeleteAtTenantScopeOperationSpec, options);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at tenant scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginCreateOrUpdateAtTenantScope = function (deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateAtTenantScopeOperationSpec, options);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginDeleteAtManagementGroupScope = function (groupId, deploymentName, options) {
        return this.client.sendLRORequest({
            groupId: groupId,
            deploymentName: deploymentName,
            options: options
        }, beginDeleteAtManagementGroupScopeOperationSpec, options);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at management group scope.
     * @param groupId The management group ID.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginCreateOrUpdateAtManagementGroupScope = function (groupId, deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            groupId: groupId,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateAtManagementGroupScopeOperationSpec, options);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. This is an asynchronous operation that
     * returns a status of 202 until the template deployment is successfully deleted. The Location
     * response header contains the URI that is used to obtain the status of the process. While the
     * process is running, a call to the URI in the Location header returns a status of 202. When the
     * process finishes, the URI in the Location header returns a status of 204 on success. If the
     * asynchronous request failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginDeleteAtSubscriptionScope = function (deploymentName, options) {
        return this.client.sendLRORequest({
            deploymentName: deploymentName,
            options: options
        }, beginDeleteAtSubscriptionScopeOperationSpec, options);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources at subscription scope.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginCreateOrUpdateAtSubscriptionScope = function (deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateAtSubscriptionScopeOperationSpec, options);
    };
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the
     * subscription.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to What If.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginWhatIfAtSubscriptionScope = function (deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginWhatIfAtSubscriptionScopeOperationSpec, options);
    };
    /**
     * A template deployment that is currently running cannot be deleted. Deleting a template
     * deployment removes the associated deployment operations. Deleting a template deployment does not
     * affect the state of the resource group. This is an asynchronous operation that returns a status
     * of 202 until the template deployment is successfully deleted. The Location response header
     * contains the URI that is used to obtain the status of the process. While the process is running,
     * a call to the URI in the Location header returns a status of 202. When the process finishes, the
     * URI in the Location header returns a status of 204 on success. If the asynchronous request
     * failed, the URI in the Location header returns an error-level status code.
     * @summary Deletes a deployment from the deployment history.
     * @param resourceGroupName The name of the resource group with the deployment to delete. The name
     * is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginDeleteMethod = function (resourceGroupName, deploymentName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * You can provide the template and parameters directly in the request or link to JSON files.
     * @summary Deploys resources to a resource group.
     * @param resourceGroupName The name of the resource group to deploy the resources to. The name is
     * case insensitive. The resource group must already exist.
     * @param deploymentName The name of the deployment.
     * @param parameters Additional parameters supplied to the operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginCreateOrUpdate = function (resourceGroupName, deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Returns changes that will be made by the deployment if executed at the scope of the resource
     * group.
     * @param resourceGroupName The name of the resource group the template will be deployed to. The
     * name is case insensitive.
     * @param deploymentName The name of the deployment.
     * @param parameters Parameters to validate.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Deployments.prototype.beginWhatIf = function (resourceGroupName, deploymentName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            deploymentName: deploymentName,
            parameters: parameters,
            options: options
        }, beginWhatIfOperationSpec, options);
    };
    Deployments.prototype.listAtScopeNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAtScopeNextOperationSpec, callback);
    };
    Deployments.prototype.listAtTenantScopeNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAtTenantScopeNextOperationSpec, callback);
    };
    Deployments.prototype.listAtManagementGroupScopeNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAtManagementGroupScopeNextOperationSpec, callback);
    };
    Deployments.prototype.listAtSubscriptionScopeNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listAtSubscriptionScopeNextOperationSpec, callback);
    };
    Deployments.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return Deployments;
}());
export { Deployments };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var checkExistenceAtScopeOperationSpec = {
    httpMethod: "HEAD",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getAtScopeOperationSpec = {
    httpMethod: "GET",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelAtScopeOperationSpec = {
    httpMethod: "POST",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateAtScopeOperationSpec = {
    httpMethod: "POST",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        400: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateAtScopeOperationSpec = {
    httpMethod: "POST",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtScopeOperationSpec = {
    httpMethod: "GET",
    path: "{scope}/providers/Microsoft.Resources/deployments/",
    urlParameters: [
        Parameters.scope
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceAtTenantScopeOperationSpec = {
    httpMethod: "HEAD",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getAtTenantScopeOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelAtTenantScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateAtTenantScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}/validate",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        400: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateAtTenantScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtTenantScopeOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Resources/deployments/",
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceAtManagementGroupScopeOperationSpec = {
    httpMethod: "HEAD",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getAtManagementGroupScopeOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelAtManagementGroupScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateAtManagementGroupScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        400: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateAtManagementGroupScopeOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtManagementGroupScopeOperationSpec = {
    httpMethod: "GET",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/",
    urlParameters: [
        Parameters.groupId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceAtSubscriptionScopeOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getAtSubscriptionScopeOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelAtSubscriptionScopeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateAtSubscriptionScopeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        400: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateAtSubscriptionScopeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtSubscriptionScopeOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var checkExistenceOperationSpec = {
    httpMethod: "HEAD",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        404: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var validateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        400: {
            bodyMapper: Mappers.DeploymentValidateResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var exportTemplateOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExportResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.filter,
        Parameters.top,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var calculateTemplateHashOperationSpec = {
    httpMethod: "POST",
    path: "providers/Microsoft.Resources/calculateTemplateHash",
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "template",
        mapper: {
            required: true,
            serializedName: "template",
            type: {
                name: "Object"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: Mappers.TemplateHashResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteAtScopeOperationSpec = {
    httpMethod: "DELETE",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateAtScopeOperationSpec = {
    httpMethod: "PUT",
    path: "{scope}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.scope,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        201: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteAtTenantScopeOperationSpec = {
    httpMethod: "DELETE",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateAtTenantScopeOperationSpec = {
    httpMethod: "PUT",
    path: "providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        201: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteAtManagementGroupScopeOperationSpec = {
    httpMethod: "DELETE",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateAtManagementGroupScopeOperationSpec = {
    httpMethod: "PUT",
    path: "providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.groupId,
        Parameters.deploymentName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        201: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteAtSubscriptionScopeOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateAtSubscriptionScopeOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        201: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginWhatIfAtSubscriptionScopeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
    urlParameters: [
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DeploymentWhatIf), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WhatIfOperationResult,
            headersMapper: Mappers.DeploymentsWhatIfAtSubscriptionScopeHeaders
        },
        202: {
            headersMapper: Mappers.DeploymentsWhatIfAtSubscriptionScopeHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.Deployment), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentExtended
        },
        201: {
            bodyMapper: Mappers.DeploymentExtended
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginWhatIfOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.deploymentName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.DeploymentWhatIf), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.WhatIfOperationResult,
            headersMapper: Mappers.DeploymentsWhatIfHeaders
        },
        202: {
            headersMapper: Mappers.DeploymentsWhatIfHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtScopeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtTenantScopeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtManagementGroupScopeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listAtSubscriptionScopeNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeploymentListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=deployments.js.map